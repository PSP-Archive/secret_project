#ifndef sdk_utils_H
#define sdk_utils_H

#define INDEX_BLACK			10
#define INDEX_WHITE			1
#define INDEX_PINK			2
#define INDEX_RED			3
#define INDEX_BLUE			4
#define INDEX_GREEN			5
#define INDEX_YELLOW		6
#define INDEX_CYAN			7
#define INDEX_GRAY			9
#define INDEX_DARKGREEN		0
#define RANDOM				rand()%9

#define N					624
#define M 					397
#define MATRIX_A 			0x9908b0dfUL
#define UMASK 				0x80000000UL
#define LMASK 				0x7fffffffUL
#define MIXBITS(u,v) 		(((u) & UMASK)|((v) & LMASK))
#define TWIST(u,v) 			((MIXBITS(u,v) >> 1)^((v)&1UL ? MATRIX_A : 0UL))

#define SCREEN_WIDTH		512
#define SCREEN_HEIGHT  		272
#define DATA_WIDTH     		240
#define DATA_HEIGHT			136
#define LINESIZE       		512
#define FRAMESIZE      		0xAA000
#define DATA_WIDTH     		240
#define DATA_HEIGHT			136
#define MAX_ADD_LENGTH  	20
#define	PSP_LINE_SIZE 		512

typedef unsigned int  UINT;
typedef void          VOID;
typedef unsigned char BOOL;

#define CMAX_X 				60
#define CMAX_Y 				38
#define PIXELSIZE 			3

#define	NULL				0

typedef struct {
  UINT left;
  UINT right;
  UINT top;
  UINT bottom;
} RECT;

typedef struct {
  UINT cx;
  UINT cy;
} SIZE;

typedef struct {
  UINT x;
  UINT y;
} POINT;


void *memset(void *s, int c, int count);
int strlen(char *str);
static void init_genrand(unsigned long s);
static void next_state();
static unsigned long genrand_int32(void);
unsigned char *GetVramAddr(unsigned long x,unsigned long y);
void Fillvram(unsigned long color);
void AddFire(unsigned int xicount);
void CopyAvg ();
void initData();
void transferToScreen();
void PutChar(unsigned long x,unsigned long y,unsigned long color,unsigned long bgcolor,unsigned char ch,char drawfg,char drawbg,char mag);
void Print(unsigned long x,unsigned long y,unsigned long color,const char *str);




const unsigned char font[] =
{
    // much better charset, by eddie!
    // this is actually the 8x8 neuromancer
    // vga/ega mode font :)
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,   // 0x20 
    0x30,0x78,0x78,0x30,0x30,0x00,0x30,0x00,   // 0x21 
    0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00,0x00,   // 0x22 
    0x6C,0x6C,0xFE,0x6C,0xFE,0x6C,0x6C,0x00,   // 0x23 
    0x30,0x7C,0xC0,0x78,0x0C,0xF8,0x30,0x00,   // 0x24 
    0x00,0xC6,0xCC,0x18,0x30,0x66,0xC6,0x00,   // 0x25 
    0x38,0x6C,0x38,0x76,0xDC,0xCC,0x76,0x00,   // 0x26 
    0x60,0x60,0xC0,0x00,0x00,0x00,0x00,0x00,   // 0x27 
    0x18,0x30,0x60,0x60,0x60,0x30,0x18,0x00,   // 0x28 
    0x60,0x30,0x18,0x18,0x18,0x30,0x60,0x00,   // 0x29 
    0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00,   // 0x2A 
    0x00,0x30,0x30,0xFC,0x30,0x30,0x00,0x00,   // 0x2B 
    0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x60,   // 0x2C 
    0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0x00,   // 0x2D 
    0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,   // 0x2E 
    0x06,0x0C,0x18,0x30,0x60,0xC0,0x80,0x00,   // 0x2F 
    0x7C,0xC6,0xCE,0xDE,0xF6,0xE6,0x7C,0x00,   // 0x30 
    0x30,0x70,0x30,0x30,0x30,0x30,0xFC,0x00,   // 0x31 
    0x78,0xCC,0x0C,0x38,0x60,0xCC,0xFC,0x00,   // 0x32 
    0x78,0xCC,0x0C,0x38,0x0C,0xCC,0x78,0x00,   // 0x33 
    0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x1E,0x00,   // 0x34 
    0xFC,0xC0,0xF8,0x0C,0x0C,0xCC,0x78,0x00,   // 0x35 
    0x38,0x60,0xC0,0xF8,0xCC,0xCC,0x78,0x00,   // 0x36 
    0xFC,0xCC,0x0C,0x18,0x30,0x30,0x30,0x00,   // 0x37 
    0x78,0xCC,0xCC,0x78,0xCC,0xCC,0x78,0x00,   // 0x38 
    0x78,0xCC,0xCC,0x7C,0x0C,0x18,0x70,0x00,   // 0x39 
    0x00,0x30,0x30,0x00,0x00,0x30,0x30,0x00,   // 0x3A 
    0x00,0x30,0x30,0x00,0x00,0x30,0x30,0x60,   // 0x3B 
    0x18,0x30,0x60,0xC0,0x60,0x30,0x18,0x00,   // 0x3C 
    0x00,0x00,0xFC,0x00,0x00,0xFC,0x00,0x00,   // 0x3D 
    0x60,0x30,0x18,0x0C,0x18,0x30,0x60,0x00,   // 0x3E 
    0x78,0xCC,0x0C,0x18,0x30,0x00,0x30,0x00,   // 0x3F 
    0x7C,0xC6,0xDE,0xDE,0xDE,0xC0,0x78,0x00,   // 0x40 
    0x30,0x78,0xCC,0xCC,0xFC,0xCC,0xCC,0x00,   // 0x41 
    0xFC,0x66,0x66,0x7C,0x66,0x66,0xFC,0x00,   // 0x42 
    0x3C,0x66,0xC0,0xC0,0xC0,0x66,0x3C,0x00,   // 0x43 
    0xF8,0x6C,0x66,0x66,0x66,0x6C,0xF8,0x00,   // 0x44 
    0xFE,0x62,0x68,0x78,0x68,0x62,0xFE,0x00,   // 0x45 
    0xFE,0x62,0x68,0x78,0x68,0x60,0xF0,0x00,   // 0x46 
    0x3C,0x66,0xC0,0xC0,0xCE,0x66,0x3E,0x00,   // 0x47 
    0xCC,0xCC,0xCC,0xFC,0xCC,0xCC,0xCC,0x00,   // 0x48 
    0x78,0x30,0x30,0x30,0x30,0x30,0x78,0x00,   // 0x49 
    0x1E,0x0C,0x0C,0x0C,0xCC,0xCC,0x78,0x00,   // 0x4A 
    0xE6,0x66,0x6C,0x78,0x6C,0x66,0xE6,0x00,   // 0x4B 
    0xF0,0x60,0x60,0x60,0x62,0x66,0xFE,0x00,   // 0x4C 
    0xC6,0xEE,0xFE,0xFE,0xD6,0xC6,0xC6,0x00,   // 0x4D 
    0xC6,0xE6,0xF6,0xDE,0xCE,0xC6,0xC6,0x00,   // 0x4E 
    0x38,0x6C,0xC6,0xC6,0xC6,0x6C,0x38,0x00,   // 0x4F 
    0xFC,0x66,0x66,0x7C,0x60,0x60,0xF0,0x00,   // 0x50 
    0x78,0xCC,0xCC,0xCC,0xDC,0x78,0x1C,0x00,   // 0x51 
    0xFC,0x66,0x66,0x7C,0x6C,0x66,0xE6,0x00,   // 0x52 
    0x78,0xCC,0xE0,0x70,0x1C,0xCC,0x78,0x00,   // 0x53 
    0xFC,0xB4,0x30,0x30,0x30,0x30,0x78,0x00,   // 0x54 
    0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xFC,0x00,   // 0x55 
    0xCC,0xCC,0xCC,0xCC,0xCC,0x78,0x30,0x00,   // 0x56 
    0xC6,0xC6,0xC6,0xD6,0xFE,0xEE,0xC6,0x00,   // 0x57 
    0xC6,0xC6,0x6C,0x38,0x38,0x6C,0xC6,0x00,   // 0x58 
    0xCC,0xCC,0xCC,0x78,0x30,0x30,0x78,0x00,   // 0x59 
    0xFE,0xC6,0x8C,0x18,0x32,0x66,0xFE,0x00,   // 0x5A 
    0x78,0x60,0x60,0x60,0x60,0x60,0x78,0x00,   // 0x5B 
    0xC0,0x60,0x30,0x18,0x0C,0x06,0x02,0x00,   // 0x5C 
    0x78,0x18,0x18,0x18,0x18,0x18,0x78,0x00,   // 0x5D 
    0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00,   // 0x5E 
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,   // 0x5F 
    0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00,   // 0x60 
    0x00,0x00,0x78,0x0C,0x7C,0xCC,0x76,0x00,   // 0x61 
    0xE0,0x60,0x60,0x7C,0x66,0x66,0xDC,0x00,   // 0x62 
    0x00,0x00,0x78,0xCC,0xC0,0xCC,0x78,0x00,   // 0x63 
    0x1C,0x0C,0x0C,0x7C,0xCC,0xCC,0x76,0x00,   // 0x64 
    0x00,0x00,0x78,0xCC,0xFC,0xC0,0x78,0x00,   // 0x65 
    0x38,0x6C,0x60,0xF0,0x60,0x60,0xF0,0x00,   // 0x66 
    0x00,0x00,0x76,0xCC,0xCC,0x7C,0x0C,0xF8,   // 0x67 
    0xE0,0x60,0x6C,0x76,0x66,0x66,0xE6,0x00,   // 0x68 
    0x30,0x00,0x70,0x30,0x30,0x30,0x78,0x00,   // 0x69 
    0x0C,0x00,0x0C,0x0C,0x0C,0xCC,0xCC,0x78,   // 0x6A 
    0xE0,0x60,0x66,0x6C,0x78,0x6C,0xE6,0x00,   // 0x6B 
    0x70,0x30,0x30,0x30,0x30,0x30,0x78,0x00,   // 0x6C 
    0x00,0x00,0xCC,0xFE,0xFE,0xD6,0xC6,0x00,   // 0x6D 
    0x00,0x00,0xF8,0xCC,0xCC,0xCC,0xCC,0x00,   // 0x6E 
    0x00,0x00,0x78,0xCC,0xCC,0xCC,0x78,0x00,   // 0x6F 
    0x00,0x00,0xDC,0x66,0x66,0x7C,0x60,0xF0,   // 0x70 
    0x00,0x00,0x76,0xCC,0xCC,0x7C,0x0C,0x1E,   // 0x71 
    0x00,0x00,0xDC,0x76,0x66,0x60,0xF0,0x00,   // 0x72 
    0x00,0x00,0x7C,0xC0,0x78,0x0C,0xF8,0x00,   // 0x73 
    0x10,0x30,0x7C,0x30,0x30,0x34,0x18,0x00,   // 0x74 
    0x00,0x00,0xCC,0xCC,0xCC,0xCC,0x76,0x00,   // 0x75 
    0x00,0x00,0xCC,0xCC,0xCC,0x78,0x30,0x00,   // 0x76 
    0x00,0x00,0xC6,0xD6,0xFE,0xFE,0x6C,0x00,   // 0x77 
    0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6,0x00,   // 0x78 
    0x00,0x00,0xCC,0xCC,0xCC,0x7C,0x0C,0xF8,   // 0x79 
    0x00,0x00,0xFC,0x98,0x30,0x64,0xFC,0x00,   // 0x7A 
    0x1C,0x30,0x30,0xE0,0x30,0x30,0x1C,0x00,   // 0x7B 
    0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x00,   // 0x7C 
    0xE0,0x30,0x30,0x1C,0x30,0x30,0xE0,0x00,   // 0x7D 
    0x76,0xDC,0x00,0x00,0x00,0x00,0x00,0x00,   // 0x7E    
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

static unsigned long state[N];
static unsigned long *next;
static int left = 1;
static int initf = 0;
unsigned int  palette[256];
unsigned char firedata[DATA_HEIGHT + 1][DATA_WIDTH];
unsigned long drawframe;
int YhArrey[19] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
float Yarrey[19] = {3.0f,3.2f,3.4f,3.6f,3.8f,4.0f,4.2f,4.4f,4.6f,4.8f,5.0f,5.2f,5.4f,5.6f,5.8f,6.0f,6.2f,6.4f,6.6f};

// Zeiger zum VRAM
unsigned char *vramtop=(unsigned char *)0x04000000;

char items[9][55] =
{
	{"Hello World for PSP firmware 5.03"},
	{"Running via the Easter Eggsploit. :)"},
	{""},
	{"Exploit by MaTiaz"},
	{""},
	{"Thanks to malloxis, FreePlay, Archaemic, wololo,"},
	{"Cloudy, Davee and everyone else who was involved"},
	{""},
	{"Also hi Sony :D"}
};

void *memset(void *s, int c, int count)
{
	char *xs = (char *) s;

	while (count--)
	{
		*xs++ = c;
	};

	return s;
}

int strlen(char *str)
{
	int i=-1;
	while(str[++i] != '\0');
	return i;
}

static void init_genrand(unsigned long s)
{
	int j;
	state[0]= s & 0xffffffffUL;
	for (j=1; j<N; j++)
	{
		state[j] = (1812433253UL * (state[j-1] ^ (state[j-1] >> 30)) + j); 
		state[j] &= 0xffffffffUL;
	}
	left = 1; initf = 1;
}

static void next_state()
{
	unsigned long *p=state;
	int j;

	if (initf==0) init_genrand(5489UL);

	left = N;
	next = state;

	for (j=N-M+1; --j; p++)
	{
		*p = p[M] ^ TWIST(p[0], p[1]);
	};
	
	for (j=M; --j; p++)
	{
		*p = p[M-N] ^ TWIST(p[0], p[1]);
	};
	
	*p = p[M-N] ^ TWIST(p[0], state[0]);
}

static unsigned long genrand_int32(void)
{
	unsigned long y;

	if (--left == 0)
	{
		next_state();
	};
	y = *next++;

	y ^= (y >> 11);
	y ^= (y << 7) & 0x9d2c5680UL;
	y ^= (y << 15) & 0xefc60000UL;
	y ^= (y >> 18);

	return y;
}

static unsigned long rand(void) __attribute__((alias("genrand_int32")));

unsigned char *GetVramAddr(unsigned long x,unsigned long y)
{
	return vramtop+(drawframe?FRAMESIZE:0)+x*4+y*LINESIZE*4+0x40000000;
}

unsigned long colours[11];
 
int color,i;

void InitGlobals()
{
	
	
	colours[10] = 0x00000000L;
 	colours[1] = 0x00FFFFFFL;
 	colours[2] = 0x00FF00FFL;
 	colours[3] = 0x000000FFL;
 	colours[4] = 0x00FF0000L;
 	colours[5] = 0x0000FF00L;
 	colours[6] = 0x0000FFFFL;
 	colours[7] = 0x00FFFF00L;
 	colours[8] = 0x00FFFF88L;
 	colours[9] = 0x00888888L;
 	colours[0] = 0x00008800L;
	
 	i=0;
 	color=7;
}

void Fillvram(unsigned long color)
{
	unsigned char *vptr0;		
	unsigned long i;

	vptr0=GetVramAddr(0,0);

	for (i=0; i<(FRAMESIZE/4); i++)
	{
		*(unsigned long *)vptr0=color;
		vptr0+=4;
	};
};

void AddFire(unsigned int xicount)
{
	int length;
	int position;
	unsigned char value;

	while (xicount-- > 0)
	{
		length = (rand() % MAX_ADD_LENGTH) + 1;
		position = (rand() % (DATA_WIDTH - MAX_ADD_LENGTH)) ;
		value = (rand() & 0x7F) + 0x80;

		while (length-- > 0)
		{
			firedata[DATA_HEIGHT - 1][position++] = value;
			firedata[DATA_HEIGHT][position] = value;
		};
	};
};

void CopyAvg()
{
	unsigned int lrow, lcol;
	unsigned int  llocalsum;

	for (lrow = 2; lrow < DATA_HEIGHT + 1; lrow++)
	{
		for (lcol = 1; lcol < DATA_WIDTH - 1; lcol++)
		{
			llocalsum = firedata[lrow][lcol] + firedata[lrow][lcol-1] + firedata[lrow][lcol+1] + firedata[lrow+1][lcol];
			llocalsum >>= 2;
			llocalsum += firedata[lrow-1][lcol];
			llocalsum >>= 1;
			
			if (llocalsum > 128)
			{
				llocalsum -= 2;
			}
			else if (llocalsum > 4)
			{
				llocalsum -= 3;
			}
			else
			{
				llocalsum = 0;
			};

			firedata[lrow-2][lcol] = (unsigned char)llocalsum;
		};
	};
};

void initData()
{
	int ii;

	palette[0]=0;

	for (ii=0; ii < 85; ii++)
	{
		unsigned char value = (ii * 256) / 85;
		palette[ii + 1] = (unsigned int)value;
		palette[ii + 86] = (((unsigned int)value) << 8) + 0xFF;
		palette[ii + 171] = (((unsigned int)value) << 16) + 0xFFFFL;
	};

	memset((void*)firedata, 0, (DATA_HEIGHT + 1) * DATA_WIDTH);
	ii = 0;
	do
	{
		AddFire((ii >> 5) + 1);
		CopyAvg();
		ii++;
	} while(ii < DATA_HEIGHT);
}

void transferToScreen()
{
	unsigned int  lrow;
	unsigned int  lcol;
	unsigned int *lpixel;
	unsigned int  lpixelvalue;

	for (lrow = 0; lrow < DATA_HEIGHT - 1; lrow++)
	{
		lpixel = (unsigned int*)GetVramAddr(0, lrow * (SCREEN_HEIGHT / DATA_HEIGHT));

		for (lcol = 0; lcol < DATA_WIDTH; lcol++)
		{
			lpixelvalue = palette[firedata[lrow][lcol]];
			lpixel[SCREEN_WIDTH] = lpixelvalue;
			*lpixel++ = lpixelvalue;
			lpixel[SCREEN_WIDTH] = lpixelvalue;
			*lpixel++ = lpixelvalue;
		};
	};
};



void PutChar(unsigned long x,unsigned long y,unsigned long color,unsigned long bgcolor,unsigned char ch,char drawfg,char drawbg,char mag)
{
	unsigned char *vptr0;
	unsigned char *vptr;
	const unsigned char *cfont;
	unsigned long cx,cy;
	unsigned long b;
	char mx,my;

	cfont=font+ch*8;

	vptr0=GetVramAddr(x,y);

	for (cy=0; cy<8; cy++)
	{
		for (my=0; my<mag; my++)
		{
			vptr=vptr0;
			b=0x80;
			for (cx=0; cx<8; cx++)
			{
				for (mx=0; mx<mag; mx++)
				{
					if ((*cfont&b)!=0)
					{
						if (drawfg)
						{
							*(unsigned long *)vptr=color;
						};
					}
					else
					{
						if (drawbg)
						{
							*(unsigned long *)vptr=bgcolor;
						};
					};
					vptr+=4;
				};
				b=b>>1;
			};
			vptr0+=LINESIZE*4;
		};
		cfont++;
	};
};

void Print(unsigned long x,unsigned long y,unsigned long color,const char *str)
{
	while (*str!=0 && x<CMAX_X && y<CMAX_Y)
	{
		PutChar(x*8,y*8,color,0,*str,1,1,1);
		str++;
		x++;
		if (x>=CMAX_X)
		{
			x=0;
			y++;
		}
	}
}

void FillRect(RECT *xirect, unsigned long xicolour)
{
  unsigned long *vptrl;
  unsigned char *vptrc;
  int      y;

  for (y = xirect->top; y < xirect->bottom; y++)
  {
    int x = xirect->left;
    vptrc = GetVramAddr(x,y);
    vptrl = (unsigned long*)vptrc;

    while (x < xirect->right)
    {
      *vptrl++ = xicolour;
      x++;
    }
  }
}

RECT pixel;
void drawPixel(int x, int y, int sizex, int sizey, unsigned long color) {
     pixel.top = y;
     pixel.left = x;
     pixel.bottom = y+sizey;
     pixel.right = x+sizex;
     
     FillRect(&pixel, color);
}

#endif